* Welcome to EASY - Evented Accounting Sourced from Yaml

=easy= is a command line utility which generates artifacts typically
used in accounting based on events provided as YAML files.

Each YAML file contains one or more events.

Some of the fields are optional some are mandatory. See the Specs for details:

- [[src/easy/common.cljs][common]]
  - [[src/easy/expense.cljs][expense]]
  - [[src/easy/revenue.cljs][revenue]]
    - [[src/easy/revenue/item.cljs][revenue item]]

** Example YAML file

#+BEGIN_EXAMPLE
---
- type: revenue
  date: 2017-12-04
  customer: 6
  number: 2
  version: 1
  deadline: 30
  items:
    - rate: 200
      hours: 13.5
      beneficiary: phil
      discount: 0
      timesheet: path/to/timesheet.csv
#+END_EXAMPLE

** Setup

Easy runs on [[http://lumo-cljs.org/][lumo]] and uses node packages available via npm as well as
ClojureScript packages available via clojars/maven.

Hence you will need to install the npm dependencies via =npm install=.

ClojureScript dependencies are installed via a =deps.edn= and =clj=
(aka. CLI). Please install =clj= as described [[https://clojure.org/guides/deps_and_cli][here]].

** Usage

*** Examples

Render ledger entries from events and run the through ledger to create
a balance:

=easy ledger example.yml | ledger bal -f -=

Render invoice 18.2.1 to latex:

=easy invoice example.yml 18.2.1=

Just run a transform to see the transformed events, which is handy for
writing templates:

=easy transform example.yml=

** Semantics

| type       | path        | modus     |
|------------+-------------+-----------|
| settlement | date        | required  |
|            | amount      | required  |
|            | invoice-no  | required¹ |
|            | customer-id | required¹ |
|            | number      | required¹ |
|            | version     | required¹ |
|            | description | optional  |
|            | iso-date    | derived   |
|            |             |           |

This is pseudo-YAML with the description of the property in place of
its value.

#+BEGIN_SRC yaml
  # Eröffnungsbilanz
  - type: opening

  # Rechnung wurde gestellt
  - type: invoice

  # Rechnung wurde beglichen
  - type: "settlement"
    date: >-
      The date of the money transfer.
    amount: >-
      The amount of money that has been transfered. It is expected to be
      equal or (if rounded) close to the gross-total of the
      corresponding invoice.
    invoice-no: >-
      The number of the corresponding invoice, which is usually also
      given on the transfer details.

  # Ausgabe/Aufwand
  - type: expense

  # Rückerstattung
  - type: refund

  # Ausgleichsbuchung
  - type: reconciliation

  # Gehalt
  - type: salary

  # Spesenabrechnung
  - type: outlay
#+END_SRC

** Notes

#+BEGIN_SRC sh
sudo apt install python-pip
pip install yq
#+END_SRC

** TODOs

*** write subcommand to generate a reconciliation event so that Aktiva::Joint is 0
*** write subcommand to generate entries that share profit
