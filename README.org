* Welcome to EASY - Evented Accounting Sourced from Yaml

=easy= is a command line utility which generates artifacts typically
used in accounting based on events provided as YAML files.

Each YAML file contains one or more events.

Some of the fields are optional some are mandatory. See the Specs for details:

- [[src/easy/common.cljs][common]]
  - [[src/easy/expense.cljs][expense]]
  - [[src/easy/revenue.cljs][revenue]]
    - [[src/easy/revenue/item.cljs][revenue item]]

** Example YAML file

#+BEGIN_EXAMPLE
---
- type: revenue
  date: 2017-12-04
  customer: 6
  number: 2
  version: 1
  deadline: 30
  items:
    - rate: 200
      hours: 13.5
      beneficiary: phil
      discount: 0
      timesheet: path/to/timesheet.csv
#+END_EXAMPLE

** Setup

Easy runs on [[http://lumo-cljs.org/][lumo]] and uses node packages available via npm as well as
ClojureScript packages available via clojars/maven.

Hence you will need to install the npm dependencies via =npm install=.

ClojureScript dependencies are installed via a =deps.edn= and =clj=
(aka. CLI). Please install =clj= as described [[https://clojure.org/guides/deps_and_cli][here]].

** Usage

*** Examples

Render ledger entries from events and run the through ledger to create
a balance:

=easy ledger example.yml | ledger bal -f -=

Render invoice 18.2.1 to latex:

=easy invoice example.yml 18.2.1=

Just run a transform to see the transformed events, which is handy for
writing templates:

=easy transform example.yml=

** Semantics

Through the code events should be called `evt`, instead of e.g.
`invoice` or `settlement`. This is mostly because its shorter and it
makes copying or refactoring less error prone.

| type       | path        | modus     |
|------------+-------------+-----------|
| settlement | date        | required  |
|            | amount      | required  |
|            | invoice-no  | required¹ |
|            | customer-id | required¹ |
|            | number      | required¹ |
|            | version     | required¹ |
|            | description | optional  |
|            | iso-date    | derived   |
|            |             |           |

This is pseudo-YAML with the description of the property in place of
its value.

#+BEGIN_SRC yaml
  # Eröffnungsbilanz
  - type: opening

  # Rechnung wurde gestellt
  - type: invoice

  # Rechnung wurde beglichen
  - type: "settlement"
    date: >-
      The date of the money transfer.
    amount: >-
      The amount of money that has been transfered. It is expected to be
      equal or (if rounded) close to the gross-total of the
      corresponding invoice.
    invoice-no: >-
      The number of the corresponding invoice, which is usually also
      given on the transfer details.

  # Ausgabe/Aufwand
  - type: expense

  # Rückerstattung
  - type: refund

  # Ausgleichsbuchung
  - type: reconciliation

  # Gehalt
  - type: salary

  # Spesenabrechnung
  - type: outlay
#+END_SRC

** On Transform and Resolve and how EASY avoids black holes

Easy uses a multimethod =transform= to transform events into a
/usable/ form. /Usable/ meaning it has all the details calculated and
associated data added to be used in a template.

The transformation of a single event might happen within a =context=.
The =context= is the set of all events within a processing run.
(Technically the =context= is not a set, but a map, where the values
are lists of events and the keys are their corresponding =type=. This
is for convenience because in almost all cases you only want to have
events of a single =type= when using the context to resolve associated
events.)

Associated data is added via resolve-fns. The resolve-fns use the
context to lookup other events. As the context contains only "mildy"
and not fully transformed events the resolve-fn will very likely have
to transform the resolved event in order to make it usable. If this
would mean that another resolve-fn is triggere this will likely
trigger an endless recursion of resolves.

To prevent this from happening you have to adhere to the following
conventions: (A) Resolve functions that receive =nil= as the =context=
should return the event untouched. (B) When calling =transform= from a
resolve-fn, allways pass =nil= as the =context=.

** Notes

#+BEGIN_SRC sh
sudo apt install python-pip
pip install yq
#+END_SRC

** TODOs

*** write subcommand to generate a reconciliation event so that Aktiva::Joint is 0
*** write subcommand to generate entries that share profit
